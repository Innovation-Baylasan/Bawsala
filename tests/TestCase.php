<?php

namespace Tests;

use App\Category;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Http\UploadedFile;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        if (!defined('LARAVEL_START')) {
            define('LARAVEL_START', microtime(true));
            define('TELESCOPE_ENABLED', false);
        }

    }

    public function signIn($user = null, $driver = null)
    {
        return $this->actingAs($user ?: factory('App\User')->create(), $driver);
    }

    public function signInAsCompany($user = null, $driver = null)
    {

        return $this->actingAs($user ?: factory('App\User', [
            'register_as' => 'company',
            'category' => factory(Category::class)->create()->id,
            'location' => '12.23778823,23.2312312'
        ])->create(), $driver);

    }

    public function createCompanyUser() {

        $company = [
            'name' => 'User With Image',
            'username' => 'userwithimage',
            'email' => 'userwithimage@register.com',
            'register_as' => 'company',
            'category' => factory(Category::class)->create()->id,
            'location' => '12.23778823,23.2312312',
            'description' => 'This is a company',
            'password' => 'register@12345678',
            'password_confirmation' => 'register@12345678',
            'avatar' => UploadedFile::fake()->image('avatar.jpg'),
            'cover' => UploadedFile::fake()->image('cover.jpg')
        ];

        $response = $this->post(route('api.register.store'), $company)->decodeResponseJson();

        $user = \App\User::find($response["data"]["user"]["id"]);

        return $user;
    }

}
